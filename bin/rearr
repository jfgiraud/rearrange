#!/bin/bash


function usage() {
    (cat <<-EOF
#BEGIN_DO_NOT_MODIFY:make update-doc
REARR(1)                                                                                                   User commands                                                                                                  REARR(1)

NAME
       rearr - Rearrange sections in each lines of files

SYNOPSIS
       rearr [OPTION] [FILE]

DESCRIPTION
       rearr is a small utility to rearrange sections in each line of files.

       It can remove and duplicate sections and also change the order of sections.

       With no FILE, or when FILE is -, read standard input.

OPTIONS
       -h
           Display help.

       -v
           Display version.

       -d DELIM
           Use DELIM instead of TAB for field delimiter. Do not define when selecting characters with option -c;

       -o DELIM
           Use DELIM as the output delimiter the default is to use the input delimiter.

       -f LIST
           Select only these fields;  also print any line that contains no delimiter character, unless the -s option is specified. Each item of the list is a number (=1 for the first, -1 for the last) or a range
           (start:end(:step) where start/end values are includes and the step increment optional).

       -c LIST
           select only these characters. Each item of the list is a number (=1 for the first, -1 for the last) or a range (start:end(:step) where start/end values are includes and the step increment optional)

       -s
           do not print lines not containing delimiters

EXAMPLES
       Display fields 4, 1 to 3 and the 2 lasts of /etc/passwd changing the output separator to ;.

           $ rearr -f4,1:3,-2: -d: -o';' /etc/passwd | head
           0;root;x;0;/root;/bin/bash
           1;daemon;x;1;/usr/sbin;/usr/sbin/nologin
           2;bin;x;2;/bin;/usr/sbin/nologin
           3;sys;x;3;/dev;/usr/sbin/nologin
           65534;sync;x;4;/bin;/bin/sync
           60;games;x;5;/usr/games;/usr/sbin/nologin
           12;man;x;6;/var/cache/man;/usr/sbin/nologin
           7;lp;x;7;/var/spool/lpd;/usr/sbin/nologin
           8;mail;x;8;/var/mail;/usr/sbin/nologin
           9;news;x;9;/var/spool/news;/usr/sbin/nologin

       Display fields 1 to last (step by 2).

           $ head /etc/passwd | rearr -d':' -f 1::2
           root:0:root:/bin/bash
           daemon:1:daemon:/usr/sbin/nologin
           bin:2:bin:/usr/sbin/nologin
           sys:3:sys:/usr/sbin/nologin
           sync:4:sync:/bin/sync
           games:5:games:/usr/sbin/nologin
           man:6:man:/usr/sbin/nologin
           lp:7:lp:/usr/sbin/nologin
           mail:8:mail:/usr/sbin/nologin
           news:9:news:/usr/sbin/nologin

       Reverse columns.

           $ head /etc/passwd | rearr -d':' -f -1:1:-1
           /bin/bash:/root:root:0:0:x:root
           /usr/sbin/nologin:/usr/sbin:daemon:1:1:x:daemon
           /usr/sbin/nologin:/bin:bin:2:2:x:bin
           /usr/sbin/nologin:/dev:sys:3:3:x:sys
           /bin/sync:/bin:sync:65534:4:x:sync
           /usr/sbin/nologin:/usr/games:games:60:5:x:games
           /usr/sbin/nologin:/var/cache/man:man:12:6:x:man
           /usr/sbin/nologin:/var/spool/lpd:lp:7:7:x:lp
           /usr/sbin/nologin:/var/mail:mail:8:8:x:mail
           /usr/sbin/nologin:/var/spool/news:news:9:9:x:news

AUTHOR
       Written by Jean-François Giraud. == COPYRIGHT

       Copyright © 2023 Jean-François Giraud. License GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent
       permitted by law.

rearrange-columns 0.0.6                                                                                     2023-09-12                                                                                                    REARR(1)
#END_DO_NOT_MODIFY:make update-doc
EOF
) | awk '/#BEGIN_DO_NOT_MODIFY:make update-doc/,/^#END_DO_NOT_MODIFY:make update-doc/' | awk '/NAME/,/AUTHOR/' | tail -n +1 | head -n -1
    exit 0
}

function display_version() {
    grep -B1 '#END_DO_NOT_MODIFY:make update-doc' $0 | head -n1 | cut -d ' ' -f2
    exit 0
}

function error() {
    STATUS="$1"
    MSG="$2"
    cat >&2 <<-EOF
${0##*/}: ${MSG}
Try \`${0##*/} -h\` for more information.
EOF
    exit 1
}

delimiter_user_defined=0
delimiter="\t"
only_delimited=0
while getopts ":hf:c:d:o:vs" o
do
	  case "$o" in
		    h)
                usage
                ;;
	    	f)
                if [[ -n "${by}" ]]; then
                    error 2 "a list of ${by}s is already defined"
                fi
                list="${OPTARG}"
                by='field'
                ;;
	    	c)
                if [[ -n "${by}" ]]; then
                    error 2 "a list of ${by} is already defined"
                fi
	    	    delimiter=''
                list="${OPTARG}"
                by='character'
                ;;
            d)
                delimiter_user_defined=1
                delimiter="${OPTARG}"
                ;;
            o)
                output_delimiter="${OPTARG}"
                ;;
            s)
                only_delimited=1
                ;;
            v)
                display_version
                ;;
            ?)
                error "An argument is requiered for option -${OPTARG}."
                ;;
	  esac
done

if [[ -z "${list}" ]]; then
    error 1 "you must specify a list of characters or fields"
fi

if [[ ${delimiter_user_defined} -eq 1 && "${by}" == "character" ]]; then
    error 3 "a delimiter can not be defined when using -c option"
fi

shift $((${OPTIND} - 1))

file="$1"
if [ -z ${file} ]; then
    file="-"
fi

#echo "list: ${list}"
#echo "by: ${by}"
#echo "delimiter: ${delimiter}"
#echo "file: ${file}"

awkscript=$(mktemp)

trap "rm -f ${awkscript}" EXIT

output_delimiter=${output_delimiter:=$delimiter}

cat - > ${awkscript} <<-'EOD'
#BEGIN_DO_NOT_MODIFY:make update-script
function to_index(field) {
    if (field ~ /^[0-9]+$/) {
        idx = field;
        if (idx > NF || idx == 0) {
            printf "Error: Invalid column number #%s (min=1, max=%s) [field=%s]\n", idx, NF, field > "/dev/stderr";
            exit 1;
        }
        return idx;
    } else if (field ~ /^-[0-9]+$/) {
        idx = NF+field+1;
        if (idx > NF || idx < 1) {
            printf "Error: Invalid column number #%s (min=1, max=%s) [field=%s]\n", idx, NF, field > "/dev/stderr";
            exit 1;
        }
        return idx;
    }
    printf "Error: Invalid field [%s]\n", field > "/dev/stderr";
    exit 1;
}

BEGIN {
    split(list, FIELDSARR, ",");
}

{
    if ($0 !~ FS) {
        if (ONLY_DELIMITED ~ /0/) {
            print $0;
        }
        next;
    }

    first=1
    for (r in FIELDSARR) {
        if (first == 0) {
            printf "%s", OFS;
        } else {
            first = 0;
        }
        #print "r=" r " => " FIELDSARR[r] > "/dev/stderr";
        if (FIELDSARR[r] ~ /^[0-9]+$/ || FIELDSARR[r] ~ /^-[0-9]+$/) {
            idx = to_index(FIELDSARR[r]);
            printf "%s", $idx;
        } else if (FIELDSARR[r] ~ /^((-)?[0-9]+)?:((-)?[0-9]+)?(:(-)?[0-9]+)?$/) {
            split(FIELDSARR[r], tab, ":");
            if (tab[3] ~ /^[0-9]+$/) {
                from = to_index(tab[1] ~ /^$/ ? 1 : tab[1]);
                to = to_index(tab[2] ~ /^$/ ? NF : tab[2]);
                step = tab[3];
            } else if (tab[3] ~ /^-[0-9]+$/) {
                step = tab[3];
                from = to_index(tab[1] ~ /^$/ ? NF : tab[1]);
                to = to_index(tab[2] ~ /^$/ ? 1 : tab[2]);
            } else {
                from = to_index(tab[1] ~ /^$/ ? 1 : tab[1]);
                to = to_index(tab[2] ~ /^$/ ? NF : tab[2]);
                step = 1;
            }
            if (step >= 0) {
                for (i=from; i<=to; i=i+step) {
                    printf "%s", $i;
                    if (i != to) {
                        printf "%s", OFS;
                    }
                }
            } else {
                for (i=from; i>=to; i=i+step) {
                    printf "%s", $i;
                    if (i != to) {
                        printf "%s", OFS;
                    }
                }
            }
            #printf "from=%s to=%s\n", from, to > "/dev/stderr";
        } else {
            printf "Error: Invalid syntax [field=%s]\n", FIELDSARR[r] > "/dev/stderr";
        }
    }
    printf "%s", ORS;
}
#END_DO_NOT_MODIFY:make update-script
EOD


while [[ -n "${file}" ]];
do
    awk -f ${awkscript} -v list=${list} -F "${delimiter}" -v OFS="${output_delimiter}" -v "ONLY_DELIMITED=${only_delimited}" ${file}
    shift
    file="$1"
done
